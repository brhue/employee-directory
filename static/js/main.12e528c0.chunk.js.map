{"version":3,"sources":["components/EmployeeSearch.js","components/EmployeeTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeSearch","handleInput","className","type","placeholder","onInput","EmployeeTable","employees","handleClick","useState","filterQuery","setFilterQuery","filteredEmployees","filter","employee","name","first","last","toLowerCase","includes","e","query","currentTarget","value","data-dir","data-symbol","onClick","direction","getAttribute","setAttribute","map","i","src","picture","thumbnail","alt","phone","href","email","Date","dob","date","toLocaleDateString","App","setEmployees","useEffect","a","fetch","response","json","data","results","console","error","getEmployees","sortKey","currentEmployees","toSort","sort","second","localeCompare","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12e528c0.chunk.js","sourcesContent":["export default function EmployeeSearch({ handleInput }) {\n  return (\n    <form className=\"py-1\">\n      <input className=\"form-control\" type=\"search\" placeholder=\"Search\" onInput={handleInput} />\n    </form>\n  );\n}","import { useState } from 'react';\nimport EmployeeSearch from \"./EmployeeSearch\";\n\nexport default function EmployeeTable({ employees, handleClick }) {\n  const [filterQuery, setFilterQuery] = useState('');\n\n  function handleInput(e) {\n    const query = e.currentTarget.value;\n    setFilterQuery(query);\n  }\n\n  const filteredEmployees = employees.filter(employee => {\n    const fullName = `${employee.name.first} ${employee.name.last}`.toLowerCase();\n    return fullName.includes(filterQuery);\n  });\n\n  return (\n    <>\n      <EmployeeSearch handleInput={handleInput} />\n      <table className=\"w-100\">\n        <thead>\n          <tr>\n            <th>Image</th>\n            <th\n              data-dir={1}\n              data-symbol=\"▼\"\n              onClick={(e) => {\n                const direction = e.currentTarget.getAttribute(\"data-dir\");\n                e.currentTarget.setAttribute(\"data-dir\", -direction);\n                e.currentTarget.setAttribute(\"data-symbol\", direction === \"1\" ? \"▼\" : \"▲\");\n                handleClick(\"name\", direction);\n              }}\n            >\n              Name\n            </th>\n            <th>Phone</th>\n            <th>Email</th>\n            <th\n              data-dir={1}\n              data-symbol=\"▼\"\n              onClick={(e) => {\n                const direction = e.currentTarget.getAttribute(\"data-dir\");\n                e.currentTarget.setAttribute(\"data-dir\", -direction);\n                e.currentTarget.setAttribute(\"data-symbol\", direction === \"1\" ? \"▼\" : \"▲\");\n                handleClick(\"dob\", direction);\n              }}\n            >DOB</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredEmployees.map((employee, i) => (\n            // TODO: Use a better key!\n            <tr key={i}>\n              <td>\n                <img src={employee.picture.thumbnail} alt=\"Employee headshot.\" />\n              </td>\n              <td>\n                {employee.name.first} {employee.name.last}\n              </td>\n              <td>{employee.phone}</td>\n              <td>\n                <a href={`mailto:${employee.email}`}>{employee.email}</a>\n              </td>\n              <td>{new Date(employee.dob.date).toLocaleDateString()}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport EmployeeTable from \"./components/EmployeeTable\";\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n\n  function handleClick(sortKey, direction) {\n    setEmployees((currentEmployees) => {\n      const toSort = [...currentEmployees];\n      if (sortKey === \"name\") {\n        toSort.sort((first, second) => {\n          // direction reverses the sort depending on if it's 1 or -1.\n          return first.name.first.localeCompare(second.name.first) * direction;\n        });\n      } else if (sortKey === \"dob\") {\n        toSort.sort((first, second) => {\n          if (first.dob.date < second.dob.date) {\n            return -direction;\n          } else if (first.dob.date > second.dob.date) {\n            return direction;\n          } else {\n            return 0;\n          }\n        });\n      }\n      return toSort;\n    });\n  }\n\n  useEffect(() => {\n    async function getEmployees() {\n      try {\n        const response = await fetch(\"https://randomuser.me/api/?results=50\");\n        const data = await response.json();\n        setEmployees(data.results);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    getEmployees();\n  }, []);\n\n  return (\n    <div className=\"text-center\">\n      <header className=\"py-1\">\n        <h1>Employee Directory</h1>\n        <p>Click on a heading to sort by column or use the search input to filter by name.</p>\n      </header>\n      <div className=\"container\">\n        <EmployeeTable employees={employees} handleClick={handleClick} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}